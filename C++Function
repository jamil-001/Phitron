#Function
//C++ main Headerfile
#include<bits/stdc++.h>
//Set precition dosomiker pore koighor
*cout << fixed << setprecition(3)<<d<<endl;

//Sort cut ifelse
//ternary operator
example:
int x = 10;
x%2 == 0 ? cout << "Even\n" : cout << "Odd\n";

//min function
1. min(a,b);

//max function
2. max({a,b,c,d});

//swap function
3. swap({a,b,c,d});

//when we input and output full string use this function
4. cin.getline(string_name,size_of_string);

//IGNORE inter space
5. cin.ignore();

//Moduls 2
@ Dynamic Variable:
Example:
{ int x = 10;
int *p = new int;//declare dynamic veriable
*p = 100;
cout << *p << endl; }
i.Static Variable:
value return korlei value clear oyjai
example:

/*#include<bits/stdc++.h>
using namespace std;
int* p;
void fun(){
    int x = 10;
    p = &x;
    cout << "Fun ->" << *p << endl;
    return;
}
int main(){
    fun();
    cout << "main ->" << *p << endl;
    return 0;
}*/

ii. Dynamic Variable 
# value return korle value take
exp:
/* #include<bits/stdc++.h>
using namespace std;
int* p;
void fun(){
    int* x = new int ;//Dynamic variable
    *x = 10;
    p = x;
    cout << "Fun ->" << *p << endl;
    return;
}
int main(){
    fun();
    cout << "main ->" << *p << endl;
    return 0;
}*/

iii. Dynamic Array Return from function
1. Static Array:
exp:
#include<bits/stdc++.h>
using namespace std;
int* fun(){
    int a[5];
    for(int i = 0;i<5;i++){
        cin >> a[i];
    }
    return a;
}
int main(){
   int* x =  fun();  
   //Not Return Same value;
    return 0;
}

2. Dynamic Array Return from Function
Exp:
#include<bits/stdc++.h>
using namespace std;
int* fun(){
    int* x = new int[5];//Declare Dynamic Array
    for(int i = 0;i<5;i++){
        cin >> x[i];
    }
    return x;
}
int main(){
   int* y =  fun();  
   for(int i = 0;i<5;i++){
       cout<<  y[i] << " ";
    }
    return 0;
}  

//Dynamic variable delete function
int* a= new int;
delete a;

//Dynamic Array delete function when this array are alrady uses
int* a = new int[3];
delete[] a;

//Syntax of class & Object

/*#include<bits/stdc++.h>
using namespace std;
class Student
{
    public:
    char name[100];
    int roll;
    double gpa;

};
int main(){
    Student a,b;
    cin.getline(a.name,100);
    cin >> a.roll >> a.gpa;

    cin.ignore();
    //getchar();
    cin.getline(b.name,100);
    cin >> b.roll >> b.gpa;
    
    
    cout << a.name << " "<< a.roll <<" "<<a.gpa <<endl;
    cout << b.name << " "<< b.roll <<" "<<b.gpa <<endl;
    
    return 0;
}*/

//Syntax of Constructor

#include<bits/stdc++.h>
using namespace std;
class Student
{   public:
    int roll;
    int cls;
    double gpa;
    Student(int r,int c,double g)///constructor
    {
        roll = r;
        cls = c;
        gpa = g;
    }
};
int main(){
    Student Rahim(111,3,3.5);
    Student Karim(10, 5,4.5);
    cout << Rahim.roll <<" "<< Rahim.cls << " "<< Rahim.gpa<<endl;
    cout << Karim.roll <<" "<< Karim.cls << " "<< Karim.gpa<<endl;
    return 0;
}

//When we use same variable then we use this & arrow keyword of class & object in constructor:
/* Student(int roll,int cls,double gpa)
    {
        (*this).roll = roll;
        this->cls = cls;
        this->gpa = gpa;
    }
*/

//Dynamic Object Return from Function

/* #include<bits/stdc++.h>
using namespace std;
class Student
{
    public:
    int roll;
    int cls;
    double gpa;
    Student(int roll,int cls,double gpa){
        this->roll = roll;
        this->cls = cls;
        this->gpa = gpa;
    }
};
Student* fun(){//dynamic object pawa jai static pointer pawa jaina 
    Student* karim = new Student(2,5,4.00);
   return karim;  
}
int main(){
    Student* p = fun();
    cout << p->roll <<" "<< p->cls <<" "<< p->gpa <<endl;
    return 0;
}
*/

//Sorting Function
/*#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >> n;
    int a[n];
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    //sort(starting,endding);
    //Ascending Order 
    //sort(a,a+n);
    
    //Discending Order
    //sort(a,a+n, greater<int>());

    sort(a,a+n, greater<int>());
    for(int i=0;i<n;i++){
        cout << a[i] <<" ";
    }
    return 0;
}*/

//YES, constructor object return from function...


//Manually object create and declare

/*#include<bits/stdc++.h>
using namespace std;
class Cricketer
{
    public:
    int jersey_no;
    string country;
};
int main(){
    Cricketer* dhoni = new Cricketer();
    dhoni->jersey_no = 7;
    dhoni->country = "India";

    Cricketer* kohli = dhoni;

    cout << kohli->country <<" "<<kohli->jersey_no <<endl;
    delete dhoni;

    
    Cricketer* dhoni = new Cricketer();
    dhoni->jersey_no = 7;
    dhoni->country = "india";

    Cricketer* kohli = new Cricketer();
    kohli->jersey_no = dhoni->jersey_no;
    kohli->country = dhoni->country;

   
    delete dhoni;
  
    cout<<"Before deleting kholi"<<" "<< kohli->jersey_no<<" "<<kohli->country <<endl;
    
    delete kohli;
    
    return 0;
}*/

//Dynamically Allocate Array
#include<bits/stdc++.h>
using namespace std;
int* sortIt(int n){
    int* arr= new int[n];
    for(int i=0;i<n;i++){
        cin >> arr[i];
    }
    sort(arr,arr+n,greater<int>());
    return arr;
}
int main(){
    int n;
    cin >> n;
    int* arr =sortIt(n);
    for(int i=0;i<n;i++){
        cout <<arr[i]<<" ";
    }
    return 0;
}
//


//Element Access
#include<bits/stdc++.h>
using namespace std;
int main(){
    string s;
    cin >> s;
    /*cout << s[4];//for access element*/
    
    cout << s.front() <<endl;  //for access frist element
    cout << s.back() <<endl;  //for access last element 
    return 0;
}
///String Modifier

#include<bits/stdc++.h>
using namespace std;
int main(){
     string s= "Hello world";
    // s[0]='G'; change element
     
    //string s2 = "hi";
    //s += s2; for string concate
    // s.append(s2);for string concate
    //s.push_back('A');for add new element in string
    //s.size();
    //s.pop_back();//for delete last element
    //s.pop_back();
    //string s2 ="Hi";
    //s = s2;  for assign string
    //s.assign("Gello");
    s.erase();//jodi kali raki taile sob delete kore dei
    s.erase(3,2);//delete 3 number index start and delete 2 character
     cout << s <<endl;
    return 0;
}

// Iterator like loop

#include<bits/stdc++.h>
using namespace std;
int main(){
     string s= "Hello world";
    //  for(int i=0;i<s.size();i++){
    //     cout << s[i] <<endl;
    //  }
    // cout << *s.begin() << endl;
    // cout << *(s.end()-1) << endl;
    for(auto it = s.begin();it<s.end();it++){
        cout << *it << endl;
    }
    return 0;
}

//Print with White space 

#include<bits/stdc++.h>
using namespace std;
int main(){
    int x;
    cin >> x;
    string s;
    cin.ignore();
    getline(cin,s);
    cout << x << endl;
    cout << s << endl;
    return 0;
}

//StringStream with extrat word by word

#include<bits/stdc++.h>
using namespace std;
int main(){
    string s;
    getline(cin,s);
    stringstream ss(s);
    string word;
    int cnt = 0;
    while(ss >> word){
        cout << word << " ";
        cnt++;
    }
    cout << cnt << endl;
    return 0;
}

//Strign Capacity

#include<bits/stdc++.h>
using namespace std;
int main(){
    string s= "hello";
    cout << s.size() << endl;  //for string size
    cout << s.max_size()<<endl;   //for maximum size of string
    cout << s.capacity() << endl;  // for generating dynamic string capacity
    s.clear();    //for clear string
    if(s.empty() == true){   //for check empty or not
        cout << "Empty" <<endl;
    }else{
        cout << "Not Empty"<<endl;
    } 
   s.resize(3);// for resize string
   
   cout << s <<endl;
    return 0;
} 

//Moduls 6

///01-Four Type of string constructor in c++
#include<bits/stdc++.h>
using namespace std;
int main(){
    //1
    //string s ="hello";//regular use string 
    //2
    //string s("hello world",4);// first four letter print
    //3
    //string s = "hello world";
    //string t(s,7);// first seven letter remove this string
    //4
   // string s(10,'b');// 10th print b;
    cout << s << endl;
    return 0;
}

//02-Sort function use string

#include<bits/stdc++.h>
using namespace std;
int main(){
    string s;
   cin >> s;
    sort(s.begin(),s.end());
    cout << s << endl;
    return 0;
}

//03-Range based character by character

#include<bits/stdc++.h>
using namespace std;
int main(){
    string s;
    cin >> s;
    //when don't need index then we use range based for loop
    for(char c : s){
        cout << c <<endl;
    }
    return 0;
}

//04-stringstream use for extract new word from sentence

#include<bits/stdc++.h>
using namespace std;
int main(){
    string s;
    getline(cin,s);
    stringstream ss(s);
    string word;
    ss << word;
    while(ss >> word){
        reverse(word.begin(),word.end());
        cout << " " <<word;
    }
    return 0;
}

//05-Functon Inside Class Constructor

#include<bits/stdc++.h>
using namespace std;
class Student
{   
    public:
    string name;
    int roll;
    int math;
    int englis;
    Student(string name,int roll,int math,int englis){
        this->name = name;
        this->roll = roll;
        this->math = math;
        this->englis = englis;
    }
    void total()
    {
        cout <<name<<" "<<"Total mark " <<"is "<<math+englis <<endl;
    }

};
int main(){
    Student sakib("sakib ahmod",23,86,90);
    sakib.total();
    Student rakib("rakib ahmod",24,80,90);
    rakib.total();

    return 0;
}

//06-Dynamic Object Copy

#include<bits/stdc++.h>
using namespace std;
class Cricketer
{
    public:
    string country;
    int jersey;
    Cricketer(string country,int jersey)
    {
        this->country = country;
        this->jersey = jersey;
    }
};
int main(){
    Cricketer* dhoni = new Cricketer("india",100);
    Cricketer* kohli = new Cricketer("india",18);
     *kohli = *dhoni;
     delete dhoni;
    cout << kohli->jersey <<" "<<kohli->country<< endl;
    //cout << dhoni->jersey <<" "<<dhoni->country<< endl;
    return 0;
}

// Array of object input and output newa
#include<bits/stdc++.h>
using namespace std;
class Student
{
    public:
    string name;
    int roll;
    int marks;
};
int main(){
    int n;
    cin >> n;
    Student a[n];
    for(int i=0;i<n;i++){
        cin.ignore();
        getline(cin,a[i].name);
       cin>> a[i].roll>> a[i].marks;
    }
    for(int i = 0;i<n ;i++){
        cout << a[i].name << " " << a[i].roll <<" "<<a[i].marks <<endl;
    }
    return 0;
}

// Array of object minimun & maximum find
#include<bits/stdc++.h>
using namespace std;
class Student
{
    public:
    string name;
    int roll;
    int mark;

};
int main(){
    int n;
    cin >> n;
    Student a[n];
    for(int i=0;i<n;i++){
        cin>>a[i].name >> a[i].roll >> a[i].mark;
    }

    Student mn;
    mn.mark = INT_MIN;//FOR MIN = INT_MAX; FOR MAX = INT_MIN;
    for(int i=0;i<n;i++){
        if(a[i].mark > mn.mark){//FOR MIN < FOR MAX >
            mn = a[i];
        }
    }
    cout << mn.name <<" "<< mn.roll << " "<<mn.mark <<endl;

    return 0;
}

// custom compare function -> roll/mark/name onujai ascending or disending 
#include<bits/stdc++.h>
using namespace std;
class Student
{
    public:
    string name;
    int roll;
    int mark;
};
bool cmp(Student l, Student r)
     {
    if(l.mark >= r.mark){//old version
            return true;
        }else{
            return false;
        }
       
     }
int main(){
    int n;
    cin >> n;
    Student a[n];
    for(int i = 0;i< n;i++){
        cin>> a[i].name >> a[i].roll >> a[i].mark;
    }
  
    sort(a,a+n,cmp);
    for(int i=0; i <n; i++){
        cout << a[i].name <<" "<<a[i].roll <<" "<< a[i].mark <<endl;
    }
    return 0;
}

//if mark ewual then we word roll
#include<bits/stdc++.h>
using namespace std;
class Student 
{
    public:
    string name;
    int roll;
    int mark;
};
bool cmp(Student l,Student r){
    if(l.mark == r.mark){
        return l.roll < r.roll;
    }else{
        return l.mark > r.mark;
    }
    
}
int main(){
    int n;
    cin >> n;
    Student a[n];
    for(int i=0;i<n;i++){
        cin >> a[i].name >> a[i].roll >> a[i].mark;
    }
    sort(a,a+n,cmp);
    for(int i=0;i<n;i++){
        cout <<" "<< a[i].name <<" "<< a[i].roll <<" "<< a[i].mark <<endl;
    }
    return 0;
}
