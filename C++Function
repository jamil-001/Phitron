#Function
//C++ main Headerfile
#include<bits/stdc++.h>
//Set precition dosomiker pore koighor
*cout << fixed << setprecition(3)<<d<<endl;

//Sort cut ifelse
//ternary operator
example:
int x = 10;
x%2 == 0 ? cout << "Even\n" : cout << "Odd\n";

//min function
1. min(a,b);

//max function
2. max({a,b,c,d});

//swap function
3. swap({a,b,c,d});

//when we input and output full string use this function
4. cin.getline(string_name,size_of_string);

//IGNORE inter space
5. cin.ignore();

//Moduls 2
@ Dynamic Variable:
Example:
{ int x = 10;
int *p = new int;//declare dynamic veriable
*p = 100;
cout << *p << endl; }
i.Static Variable:
value return korlei value clear oyjai
example:

/*#include<bits/stdc++.h>
using namespace std;
int* p;
void fun(){
    int x = 10;
    p = &x;
    cout << "Fun ->" << *p << endl;
    return;
}
int main(){
    fun();
    cout << "main ->" << *p << endl;
    return 0;
}*/

ii. Dynamic Variable 
# value return korle value take
exp:
/* #include<bits/stdc++.h>
using namespace std;
int* p;
void fun(){
    int* x = new int ;//Dynamic variable
    *x = 10;
    p = x;
    cout << "Fun ->" << *p << endl;
    return;
}
int main(){
    fun();
    cout << "main ->" << *p << endl;
    return 0;
}*/

iii. Dynamic Array Return from function
1. Static Array:
exp:
#include<bits/stdc++.h>
using namespace std;
int* fun(){
    int a[5];
    for(int i = 0;i<5;i++){
        cin >> a[i];
    }
    return a;
}
int main(){
   int* x =  fun();  
   //Not Return Same value;
    return 0;
}

2. Dynamic Array Return from Function
Exp:
#include<bits/stdc++.h>
using namespace std;
int* fun(){
    int* x = new int[5];//Declare Dynamic Array
    for(int i = 0;i<5;i++){
        cin >> x[i];
    }
    return x;
}
int main(){
   int* y =  fun();  
   for(int i = 0;i<5;i++){
       cout<<  y[i] << " ";
    }
    return 0;
}  

//Dynamic variable delete function
int* a= new int;
delete a;

//Dynamic Array delete function when this array are alrady uses
int* a = new int[3];
delete[] a;

//Syntax of class & Object

/*#include<bits/stdc++.h>
using namespace std;
class Student
{
    public:
    char name[100];
    int roll;
    double gpa;

};
int main(){
    Student a,b;
    cin.getline(a.name,100);
    cin >> a.roll >> a.gpa;

    cin.ignore();
    //getchar();
    cin.getline(b.name,100);
    cin >> b.roll >> b.gpa;
    
    
    cout << a.name << " "<< a.roll <<" "<<a.gpa <<endl;
    cout << b.name << " "<< b.roll <<" "<<b.gpa <<endl;
    
    return 0;
}*/

//Syntax of Constructor

#include<bits/stdc++.h>
using namespace std;
class Student
{   public:
    int roll;
    int cls;
    double gpa;
    Student(int r,int c,double g)///constructor
    {
        roll = r;
        cls = c;
        gpa = g;
    }
};
int main(){
    Student Rahim(111,3,3.5);
    Student Karim(10, 5,4.5);
    cout << Rahim.roll <<" "<< Rahim.cls << " "<< Rahim.gpa<<endl;
    cout << Karim.roll <<" "<< Karim.cls << " "<< Karim.gpa<<endl;
    return 0;
}

//When we use same variable then we use this & arrow keyword of class & object in constructor:
/* Student(int roll,int cls,double gpa)
    {
        (*this).roll = roll;
        this->cls = cls;
        this->gpa = gpa;
    }
*/

//Dynamic Object Return from Function

/* #include<bits/stdc++.h>
using namespace std;
class Student
{
    public:
    int roll;
    int cls;
    double gpa;
    Student(int roll,int cls,double gpa){
        this->roll = roll;
        this->cls = cls;
        this->gpa = gpa;
    }
};
Student* fun(){//dynamic object pawa jai static pointer pawa jaina 
    Student* karim = new Student(2,5,4.00);
   return karim;  
}
int main(){
    Student* p = fun();
    cout << p->roll <<" "<< p->cls <<" "<< p->gpa <<endl;
    return 0;
}
*/

//Sorting Function
/*#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >> n;
    int a[n];
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    //sort(starting,endding);
    //Ascending Order 
    //sort(a,a+n);
    
    //Discending Order
    //sort(a,a+n, greater<int>());

    sort(a,a+n, greater<int>());
    for(int i=0;i<n;i++){
        cout << a[i] <<" ";
    }
    return 0;
}*/

//YES, constructor object return from function...


//Manually object create and declare

/*#include<bits/stdc++.h>
using namespace std;
class Cricketer
{
    public:
    int jersey_no;
    string country;
};
int main(){
    Cricketer* dhoni = new Cricketer();
    dhoni->jersey_no = 7;
    dhoni->country = "India";

    Cricketer* kohli = dhoni;

    cout << kohli->country <<" "<<kohli->jersey_no <<endl;
    delete dhoni;

    
    Cricketer* dhoni = new Cricketer();
    dhoni->jersey_no = 7;
    dhoni->country = "india";

    Cricketer* kohli = new Cricketer();
    kohli->jersey_no = dhoni->jersey_no;
    kohli->country = dhoni->country;

   
    delete dhoni;
  
    cout<<"Before deleting kholi"<<" "<< kohli->jersey_no<<" "<<kohli->country <<endl;
    
    delete kohli;
    
    return 0;
}*/

//Dynamically Allocate Array
#include<bits/stdc++.h>
using namespace std;
int* sortIt(int n){
    int* arr= new int[n];
    for(int i=0;i<n;i++){
        cin >> arr[i];
    }
    sort(arr,arr+n,greater<int>());
    return arr;
}
int main(){
    int n;
    cin >> n;
    int* arr =sortIt(n);
    for(int i=0;i<n;i++){
        cout <<arr[i]<<" ";
    }
    return 0;
}
//
